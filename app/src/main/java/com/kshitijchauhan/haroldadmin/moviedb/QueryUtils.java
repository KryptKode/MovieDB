package com.kshitijchauhan.haroldadmin.moviedb;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.os.AsyncTask;
import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.ArrayList;

public class QueryUtils {

    /**
     * Create a private constructor because no one should ever create a {@link QueryUtils} object.
     * This class is only meant to hold static variables and methods, which can be accessed
     * directly from the class name QueryUtils (and an object instance of QueryUtils is not needed).
     */
    private QueryUtils() {
    }

    /*Create a LOG_TAG to help with logging errors and other information.*/
    private static final String LOG_TAG = QueryUtils.class.getName();

    private static final String APIKey = "45f6f2c7";

    private static final String QueryURL = "http://www.omdbapi.com/?apikey=";

    /*This function generates the query URL for requesting the JSON response file*/
    public static URL createSearchURL(String query) {
        URL searchURL = null;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(QueryURL);
        stringBuilder.append(APIKey);
        stringBuilder.append("&s=");
        stringBuilder.append(query);
        try {
            searchURL = new URL(stringBuilder.toString());
            Log.v(LOG_TAG, "Successfully created search URL :" + searchURL);
        } catch (MalformedURLException e) {
            Log.e(LOG_TAG, "Invalid search URL");
        }
        return searchURL;
    }
    /*This method creates and returns the URL to query for getting details about a movie.
    It logs an error if the URL can not be formed.
     */
    public static URL createDetailsURL(String imdbID) {
        URL detailsURL = null;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(QueryURL);
        stringBuilder.append(APIKey);
        stringBuilder.append("&i=");
        stringBuilder.append(imdbID);
        try {
            detailsURL = new URL(stringBuilder.toString());
        }
        catch (MalformedURLException e) {
            Log.e(LOG_TAG, "Error creating movie details URL");
        }
        return detailsURL;
    }
    /* Helper method to make an HTTP connection request to the OMDb server using the search
    query generated by the searchURL method.
    If the connection is successful and the JSONResponse is properly received, then it returns the
    response as a string.
     */
    public static String makeHTTPRequest(URL searchURL) throws IOException {
        String JSONResponse = "";
//        If searchURL is null, return early
        if (searchURL == null) {
            Log.v(LOG_TAG, "Unable to retrieve JSON response because search URL is null");
            return JSONResponse;
        }

        HttpURLConnection urlConnection = null;
        InputStream inputStream = null;
        try {
            urlConnection = (HttpURLConnection) searchURL.openConnection();
            urlConnection.setReadTimeout(10000 /* milliseconds */);
            urlConnection.setConnectTimeout(15000 /* milliseconds */);
            urlConnection.setRequestMethod("GET");
            urlConnection.connect();

            if (urlConnection.getResponseCode() == 200) {
                inputStream = urlConnection.getInputStream();
                JSONResponse = readFromStream(inputStream);
                Log.v(LOG_TAG, "Successfully retrieved JSON response: " + JSONResponse);
            } else {
                Log.e(LOG_TAG, "Invalid response code received from server");
            }
        } catch (IOException e) {
            Log.e(LOG_TAG, "Problem retrieving the JSON response.");
        } finally {
            if (urlConnection != null)
                urlConnection.disconnect();
            if (inputStream != null)
                inputStream.close();
        }
        return JSONResponse;
    }

    public static String readFromStream(InputStream inputStream) throws IOException {
        StringBuilder output = new StringBuilder();
        if (inputStream != null) {
            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, Charset.forName("UTF-8"));
            BufferedReader reader = new BufferedReader(inputStreamReader);
            String line = reader.readLine();
            while (line != null) {
                output.append(line);
                line = reader.readLine();
            }
        }
        return output.toString();
    }

    public static String getGenreFromId(int id) {
        Constants.setGenreMap();
        return Constants.genreMap.get(id);
    }

    public static String getSearchPosterURL(String posterPath) {
        return "https://image.tmdb.org/t/p/w154" + posterPath;
    }

    public static String getMovieDetailsPosterURL(String posterPath) {
        return "https://image.tmdb.org/t/p/w500" + posterPath;
    }

    public static String getBackdropURL(String posterPath) {
        return "https://image.tmdb.org/t/p/w1280" + posterPath;
    }

    public static String imdbUriGenerator(String imdbID) {
        return "https://imdb.com/title/" + imdbID;
    }
}




package com.kshitijchauhan.haroldadmin.moviedb;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.ArrayList;

public class QueryUtils {

    /**
     * Create a private constructor because no one should ever create a {@link QueryUtils} object.
     * This class is only meant to hold static variables and methods, which can be accessed
     * directly from the class name QueryUtils (and an object instance of QueryUtils is not needed).
     */
    private QueryUtils() {
    }

    /*Create a LOG_TAG to help with logging errors and other information.*/
    private static final String LOG_TAG = QueryUtils.class.getName();

    private static final String APIKey = "45f6f2c7";

    private static final String QueryURL = "http://www.omdbapi.com/?apikey=";

    /*This function generates the query URL for requesting the JSON response file*/
    public static URL createSearchURL(String query) {
        URL searchURL = null;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(QueryURL);
        stringBuilder.append(APIKey);
        stringBuilder.append("&s=" + "Dunkirk");
        try {
            searchURL = new URL(stringBuilder.toString());
        }
        catch (MalformedURLException e) {
            Log.e(LOG_TAG, "Invalid search URL");
        }
        return searchURL;
    }

    /* Helper method to make an HTTP connection request to the OMDb server using the search
    query generated by the searchURL method.
    If the connection is successful and the JSONResponse is properly received, then it returns the
    response as a string.
     */
    public static String makeHTTPRequest (URL searchURL) throws IOException {
        String JSONResponse = "";
        //If searchURL is null, return early
//        if (searchURL == null) {
//            return JSONResponse;
//        }

        HttpURLConnection urlConnection = null;
        InputStream inputStream = null;
        try {
            urlConnection = (HttpURLConnection) searchURL.openConnection();
            urlConnection.setReadTimeout(10000 /* milliseconds */);
            urlConnection.setConnectTimeout(15000 /* milliseconds */);
            urlConnection.setRequestMethod("GET");
            urlConnection.connect();

            if (urlConnection.getResponseCode() == 200) {
                inputStream = urlConnection.getInputStream();
                JSONResponse = readFromStream(inputStream);
            } else {
                Log.e(LOG_TAG, "Invalid response code received from server");
            }
        } catch (IOException e) {
            Log.e(LOG_TAG, "Problem retrieving the JSON response.");
        } finally {
            if (urlConnection != null)
                urlConnection.disconnect();
            if (inputStream != null)
                inputStream.close();
        }
        return JSONResponse;
    }

    public static String readFromStream(InputStream inputStream) throws IOException {
        StringBuilder output = new StringBuilder();
        if (inputStream != null) {
            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, Charset.forName("UTF-8"));
            BufferedReader reader = new BufferedReader(inputStreamReader);
            String line = reader.readLine();
            while (line != null) {
                output.append(line);
                line = reader.readLine();
            }
        }
        return output.toString();
    }

    public static Bitmap getBitmapFromURL(URL url) {
            ImageLoadTask task = new ImageLoadTask();
            task.execute(url);

    }

    public static ArrayList<Movie> getSearchResults(String query) {

        ArrayList<Movie> searchResults = new ArrayList<Movie>();

//        URL searchURL = createSearchURL(query);
        URL searchURL = createSearchURL("https://www.omdbapi.com/?apikey=45f6f2c7&s=dunkirk");
        String JSONResponse;

        try {
            JSONResponse = makeHTTPRequest(searchURL);
        }
        catch (IOException e) {
            Log.e(LOG_TAG, "Unable to get search results. IOException in makeHTTPRequest method");
            return searchResults;
        }

        try {
            JSONObject root = new JSONObject(JSONResponse);
            JSONArray results = root.getJSONArray("Search");
            int length = Integer.parseInt(root.getString("totalResults"));
            for (int i =0; i < length; i++)
            {
                JSONObject movie_details = results.getJSONObject(i);
//                Log.v (LOG_TAG, movie_details.getString("Title") + movie_details.getString("Year") + movie_details.getString("Poster"));
                Movie movie = new Movie(movie_details.getString("Title"),
                                        movie_details.getString("Year"),
                                        movie_details.getString("Poster"));
                searchResults.add(movie);
                Log.v(LOG_TAG, searchResults.get(i).getName());
            }

        }
        catch (JSONException e) {
            Log.e(LOG_TAG, "Problem parsing the JSON response.");
        }
        return searchResults;
    }

    }
    private class ImageLoadTask extends AsyncTask<URL, Void, Bitmap> {
        @Override
        protected Bitmap doInBackground(URL... urls) {
            Bitmap myBitmap = null;
            URL url = urls[0];
            try {
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                connection.setDoInput(true);
                connection.connect();
                InputStream input = connection.getInputStream();
                myBitmap = BitmapFactory.decodeStream(input);
                Log.e("Bitmap", "returned");
                return myBitmap;
            } catch (IOException e) {
                e.printStackTrace();
                Log.e("Exception", e.getMessage());
            }
            return myBitmap;
        }

        @Override
        protected void onPostExecute(Bitmap bitmap) {
            super.onPostExecute(bitmap);
        }
    }



